
/*
Реализовать сортировку подсчетом
Она заключается в подсчете количества вхождений элементов в массив и восстановление по этой информации.
[1, 3, 1, 5, 7, 7, 3, 2, 5, 7]
1 -> 2
2 -> 1
3 -> 2
5 -> 2
7 -> 3
[1, 1, 2, 3, 3, 5, 5, 7, 7, 7]
 */
import java.util.Arrays;

public class Main {
    /*
    `arr` --> входной целочисленный массив для сортировки
    `k` --> такое число, что все целые числа находятся в диапазоне '0...k-1'
     */
    public  static  void countSort(int[] arr, int k) {
        // создаем массив для хранения отсортированного ммассива

        int[] array = new int[arr.length];
        // создаем целочисленнный массив размером 'k + 1', инициализированный всеми нулями
        int[] array1 = new int[k + 1];
        // используя значение каждого элемента входного массива в качестве индекса
        // сохраняем счетчик каждого целого числа в array1
        for (int i: arr) {
            array1[i]++;
        }
        // вычисляем начальный индекс для каждого целого числа
        int total = 0;
        for(int i = 0; i < k + 1; i++){
            int oldCount = array1[i];
            array1[i] = total;
            total +=oldCount;
        }
        // копируем выходной массив обратно во входной массив
        for (int i: arr){
            array[array1[i]] = i;
            array1[i]++;
        }
        Arrays.setAll(arr, i -> array[i]);

    }
    public static void main(String[] args) {
        int[] arr = {1, 3, 1, 5, 7, 7, 3, 2, 5, 7};
        // диапазон элементов массива
        int k = 10;
        countSort(arr, k);
        System.out.println(Arrays.toString(arr));
    }
}